{"version":3,"sources":["components/Header.js","components/Footer.js","assets/default-img.svg","components/Recipes.js","components/About.js","components/ingredient/InputQuantity.js","components/ingredient/SelectUnit.js","components/ingredient/OptionsBasic.js","components/ingredient/InputName.js","components/ingredient/OptionsEdit.js","components/ingredient/OptionsAdd.js","components/ingredient/Ingredients.js","components/recipe/RecipeDescription.js","components/recipe/SelectTime.js","components/recipe/SelectPortions.js","components/recipe/RecipeInfo.js","components/recipe/Recipe.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","style","width","display","justifyContent","to","size","Footer","Recipes","recipes","map","recipe","id","src","imageUrl","undefined","image","toString","includes","alt","name","value","portions","time","isDefault","top","About","href","InputQuantity","onChange","changeQuantity","val","quantity","replace","parseFloat","type","placeholder","onKeyDown","e","key","preventDefault","validateKey","target","SelectUnit","required","hidden","OptionsBasic","onEdit","onDelete","console","log","onClick","InputName","maxLength","OptionsEdit","onAccept","onCancel","OptionsAdd","onAdd","Ingredients","extractedRecipeId","recipeIsDefault","useState","ingredients","setIngredients","addMode","setAddMode","editMode","setEditMode","newName","setNewName","newQuantity","setNewQuantity","newUnit","setNewUnit","recipeId","useEffect","getIngredients","a","fetch","res","json","fetchedIngredients","then","saveNewIngredient","newIngredient","validateNewIngredient","method","headers","body","JSON","stringify","clearInputs","data","updateIngredient","indexOfOldIngredient","indexOf","find","ingredient","newIngredients","deleteIngredient","alert","window","confirm","status","filter","unit","toLowerCase","enableEditMode","RecipeDescription","description","onEnableEditMode","onDisableEditMode","onUpdate","newPreparation","setNewPreparation","saveDescription","SelectTime","SelectPortions","RecipeInfo","newImageUrl","setNewImageUrl","newPortions","setNewPortions","newTime","setNewTime","saveRecipeInfo","clearInfoInputs","validateImageUrl","color","prepareTimeValue","Recipe","setRecipe","editInfoMode","setEditInfoMode","editDescriptionMode","setEditDescriptionMode","navigate","useNavigate","useLocation","pathname","split","pop","getRecipe","fetchedRecipe","deleteRecipe","sendRequest","newRecipe","updateRecipeInfo","preparation","updateRecipeDescription","text","Form","onSubmit","newRecipeName","setNewRecipeName","newIngredientName","setNewIngredientName","ingredientList","setIngredientList","submitForm","clearIngredientInputs","newIngredientList","i","removeIngredientFromList","addIngredientToList","App","setRecipes","getRecipes","fetchedRecipes","saveNewRecipe","recipeResponse","recipeData","ingredientsResponse","ingredientsData","filterRecipes","replaceRecipe","index","newRecipes","hashType","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aec8e3e7.chunk.js","sourcesContent":["import {MdHome, MdInfo} from \"react-icons/md\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header className='header'>\r\n            <div style={{width: 80, display: 'flex', justifyContent: 'space-between'}}>\r\n                <Link to='/'>\r\n                    <div className='icon'>\r\n                        <MdHome\r\n                            size={35}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n                <Link to='/about'>\r\n                    <div className='icon'>\r\n                        <MdInfo\r\n                            size={35}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n\r\n            <h1>COOKBOOK</h1>\r\n\r\n            <div style={{width: 80}}></div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            2021 @ AJ\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","export default __webpack_public_path__ + \"static/media/default-img.b0520a1e.svg\";","import image from \"../assets/default-img.svg\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {MdAddCircle} from \"react-icons/md\";\r\nimport {PacmanLoader} from \"react-spinners\"\r\n\r\nconst Recipes = ({recipes}) => {\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function preparePortionsValue(value) {\r\n        if (value === 0) {\r\n            return '?'\r\n        }\r\n        if (value>10) {\r\n            return '> 10'\r\n        }\r\n        return value\r\n    }\r\n\r\n    if (recipes === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n                <h3>FETCHING DATA...</h3>\r\n                <h4>please wait while backend is waking up...</h4>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='recipesContainer'>\r\n            {recipes.map((recipe) => (\r\n                    <Link to={`/recipe/${recipe.id}`} key={recipe.id}>\r\n                        <div className='recipesThumbnail' >\r\n                            <img\r\n                                src={validateImageUrl(recipe.imageUrl)}\r\n                                alt=''\r\n                            />\r\n                            <div className='recipesThumbnailBar'>\r\n                                <h3>{recipe.name}</h3>\r\n                                <div className='recipesThumbnailBarBottom'>\r\n                                    <h6>PORTIONS :&nbsp;&nbsp;{preparePortionsValue(recipe.portions)}</h6>\r\n                                    <h6>PREP.&nbsp;&nbsp;TIME :&nbsp;&nbsp;{recipe.time === '' ? '?' : recipe.time}</h6>\r\n                                </div>\r\n                            </div>\r\n                            {recipe.isDefault ? (\r\n                                <div id='defaultWatermark' style={{top: -2}}>\r\n                                    DEFAULT RECIPE\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </div>\r\n                    </Link>\r\n                )\r\n            )}\r\n            <Link to={`/form`}>\r\n                <div className='recipesThumbnailAdd' >\r\n                    <MdAddCircle\r\n                        id='addIcon'\r\n                        size={50}\r\n                    />\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipes\r\n","\r\nconst About = () => {\r\n\r\n    return (\r\n        <div id='about'>\r\n            <h3>Welcome to my CookBook App!</h3>\r\n            <div>\r\n                <br/>This UI is made with React and it consumes REST API of my Spring project deployed on Heroku.\r\n                <br/>\r\n                <br/>Fell free to add some recipes and test my app :)\r\n                <br/>\r\n                <br/>I will be grateful for comments and reported issues on my GitHub!\r\n                <br/>\r\n                <br/><a href=\"https://github.com/Arkodiusz/cookbook_ui\">Frontend repository</a>\r\n                <br/>\r\n                <br/><a href=\"https://github.com/Arkodiusz/cookbook\">Backend repository</a>\r\n                <br/>\r\n                <br/>logo & default image vector created by freepik - <a href=\"https://www.freepik.com\">www.freepik.com</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","\r\nconst InputQuantity = ({value, onChange}) => {\r\n\r\n    function validateKey(e) {\r\n        const restrictedKeys = ['e', '+', '-']\r\n        if (restrictedKeys.includes(e.key)) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    function changeQuantity(val) {\r\n        let quantity = val.replace(',','.')\r\n        if (parseFloat(quantity) < 0) {\r\n            quantity = ''\r\n        }\r\n        onChange(quantity)\r\n    }\r\n\r\n    return (\r\n        <input\r\n            type='number'\r\n            placeholder='quantity'\r\n            value={value}\r\n            onKeyDown={(e) => validateKey(e)}\r\n            onChange={(e) => changeQuantity(e.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default InputQuantity","\r\nconst SelectUnit = ({value, onChange}) => {\r\n\r\n    return (\r\n        <select\r\n            required\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}>\r\n            <option value=\"\" hidden>unit</option>\r\n            <option value=\"G\">g</option>\r\n            <option value=\"DAG\">dag</option>\r\n            <option value=\"KG\">kg</option>\r\n            <option value=\"ML\">ml</option>\r\n            <option value=\"L\">l</option>\r\n            <option value=\"TEASPOON\">teaspoon</option>\r\n            <option value=\"TABLESPOON\">tablespoon</option>\r\n            <option value=\"PINCH\">pinch</option>\r\n            <option value=\"HANDFUL\">handful</option>\r\n            <option value=\"PIECE\">piece</option>\r\n            <option value=\"CUP\">cup</option>\r\n        </select>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SelectUnit","import {MdDeleteForever, MdEdit} from \"react-icons/all\";\r\n\r\nconst OptionsBasic = ({onEdit, onDelete}) => {\r\n\r\n    console.log(onEdit)\r\n\r\n    return (\r\n\r\n        <div className='ingredientsSetupColumn'>\r\n            {\r\n                onEdit !== false ? (\r\n                    <div className='icon'>\r\n                        <MdEdit\r\n                            size={25}\r\n                            onClick={onEdit}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    // <div style={{width: 25}}></div>\r\n                    <></>\r\n                )\r\n            }\r\n            <div className='icon'>\r\n                <MdDeleteForever\r\n                    size={25}\r\n                    onClick={onDelete}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsBasic","\r\nconst InputName = ({value, onChange}) => {\r\n    return (\r\n        <input\r\n            maxLength='32'\r\n            type='text'\r\n            placeholder='name'\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default InputName","import {MdCancel, MdCheckCircle} from \"react-icons/all\";\r\n\r\nconst OptionsEdit = ({onAccept, onCancel}) => {\r\n\r\n    return (\r\n        <div className='ingredientsSetupColumn'>\r\n            <div className='icon'>\r\n                <MdCheckCircle\r\n                    size={25}\r\n                    onClick={onAccept}\r\n                />\r\n            </div>\r\n            <div className='icon'>\r\n                <MdCancel\r\n                    size={25}\r\n                    onClick={onCancel}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsEdit","import {IoMdAddCircle} from \"react-icons/all\";\r\n\r\nconst OptionsAdd = ({onAdd}) => {\r\n\r\n    return (\r\n        <div className='ingredientsSetupColumn'>\r\n            <div className='icon'>\r\n                <IoMdAddCircle\r\n                    size={25}\r\n                    onClick={onAdd}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsAdd","import {useEffect, useState} from \"react\";\r\nimport {PacmanLoader} from \"react-spinners\";\r\nimport InputQuantity from \"./InputQuantity\";\r\nimport SelectUnit from \"./SelectUnit\";\r\nimport OptionsBasic from \"./OptionsBasic\";\r\nimport InputName from \"./InputName\";\r\nimport OptionsEdit from \"./OptionsEdit\";\r\nimport OptionsAdd from \"./OptionsAdd\";\r\n\r\nconst Ingredients = ({extractedRecipeId, recipeIsDefault}) => {\r\n    const [ingredients, setIngredients] = useState(null)\r\n    const [addMode, setAddMode] = useState(false)\r\n    const [editMode, setEditMode] = useState(0)\r\n    const [newName, setNewName] = useState('')\r\n    const [newQuantity, setNewQuantity] = useState('')\r\n    const [newUnit, setNewUnit] = useState('')\r\n    const recipeId = extractedRecipeId\r\n\r\n    useEffect(() => {\r\n        const getIngredients = async () => {\r\n            const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients`)\r\n            const fetchedIngredients = await res.json()\r\n            console.log('fetched ingredients', fetchedIngredients)\r\n            setIngredients(fetchedIngredients)\r\n        }\r\n        getIngredients().then()\r\n    }, [recipeId]);\r\n\r\n    const saveNewIngredient = async () => {\r\n        const newIngredient = validateNewIngredient()\r\n        if (newIngredient.name === '') {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newIngredient),\r\n        })\r\n        console.log('saved ingredient', newIngredient)\r\n        clearInputs()\r\n        setAddMode(false)\r\n        const data = await res.json()\r\n        setIngredients([...ingredients, data])\r\n    }\r\n\r\n    const updateIngredient = async (id) => {\r\n        const newIngredient = validateNewIngredient()\r\n        if (newIngredient.name === '') {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newIngredient),\r\n        })\r\n        const data = await res.json()\r\n        const indexOfOldIngredient = ingredients.indexOf(ingredients.find((ingredient) => ingredient.id === id))\r\n        const newIngredients = ingredients\r\n        newIngredients[indexOfOldIngredient] = data\r\n        setIngredients(newIngredients)\r\n        console.log('edited ingredient =>', data)\r\n        clearInputs()\r\n        setEditMode(0)\r\n    }\r\n\r\n    const deleteIngredient = async (id) => {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t delete ingredients of default recipe')\r\n            return;\r\n        }\r\n        if (!window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/${id}`, {\r\n            method: 'DELETE',\r\n        })\r\n        res.status === 200\r\n            ? setIngredients(ingredients.filter((ingredient) => ingredient.id !== id))\r\n            : alert('Error Deleting This Ingredient')\r\n        console.log('deleted ingredient id =>', id)\r\n    }\r\n\r\n    function validateNewIngredient() {\r\n        if (newName === '' || newQuantity === '' || newUnit === '' || newUnit === 'unit') {\r\n            alert('Please fill all inputs')\r\n            return {name: ''}\r\n        }\r\n        if (parseFloat(newQuantity) > 1000) {\r\n            alert('Quantity max value is 1000')\r\n            return {name: ''}\r\n        }\r\n        if (parseFloat(newQuantity) <= 0) {\r\n            alert('Quantity min value must be grater than 0')\r\n            return {name: ''}\r\n        }\r\n        return {\r\n            name: newName,\r\n            quantity: newQuantity,\r\n            unit: newUnit\r\n        }\r\n    }\r\n\r\n    function clearInputs() {\r\n        setNewName('')\r\n        setNewQuantity('')\r\n        setNewUnit('')\r\n    }\r\n\r\n    function enableEditMode(ingredient) {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t edit ingredients of default recipe')\r\n            return;\r\n        }\r\n        setAddMode(false)\r\n        setNewName(ingredient.name)\r\n        setNewQuantity(ingredient.quantity)\r\n        setNewUnit(ingredient.unit)\r\n        setEditMode(ingredient.id)\r\n    }\r\n\r\n    function enableAddMode() {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t add ingredients to default recipe')\r\n            return;\r\n        }\r\n        setEditMode(0)\r\n        clearInputs()\r\n        setAddMode(true)\r\n    }\r\n\r\n    if (ingredients === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='ingredientsTableContainer'>\r\n            <h3>INGREDIENTS:</h3>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>NAME</th>\r\n                    <th>QUANTITY</th>\r\n                    <th>UNIT</th>\r\n                    <th>OPTIONS</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    ingredients.map( (ingredient) =>\r\n                        editMode !== ingredient.id ? (  // ********* ROW IN NORMAL MODE ********\r\n                            <tr key={ingredient.id}>\r\n                                <td>\r\n                                    {ingredient.name}\r\n                                </td>\r\n                                <td>\r\n                                    {ingredient.quantity}\r\n                                </td>\r\n                                <td>\r\n                                    {ingredient.unit.toLowerCase()}\r\n                                </td>\r\n                                <td>\r\n                                    <OptionsBasic\r\n                                        onEdit={() => enableEditMode(ingredient)}\r\n                                        onDelete={() => deleteIngredient(ingredient.id)}/>\r\n                                </td>\r\n                            </tr>\r\n                        ) : (   // ********* ROW IN EDIT MODE ********\r\n                            <tr key={ingredient.id}>\r\n                                <td>\r\n                                    <InputName\r\n                                        value={newName}\r\n                                        onChange={setNewName}/>\r\n                                </td>\r\n                                <td>\r\n                                    <InputQuantity\r\n                                        value={newQuantity}\r\n                                        onChange={setNewQuantity}/>\r\n                                </td>\r\n                                <td>\r\n                                    <SelectUnit\r\n                                        value={newUnit}\r\n                                        onChange={setNewUnit}/>\r\n                                </td>\r\n                                <td>\r\n                                    <OptionsEdit\r\n                                        onAccept={() => updateIngredient(ingredient.id)}\r\n                                        onCancel={() => {\r\n                                            setEditMode(0)\r\n                                            clearInputs()\r\n                                        }}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    )\r\n                }\r\n                {\r\n                    !addMode ? (   // ********* ADD ROW DISABLED ********\r\n                        <tr>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td>\r\n                                <OptionsAdd\r\n                                    onAdd={() => enableAddMode()}  />\r\n                            </td>\r\n                        </tr>\r\n                    ) : (   // ********* ADD ROW ENABLED ********\r\n                        <tr>\r\n                            <td>\r\n                                <InputName\r\n                                    value={newName}\r\n                                    onChange={setNewName}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <InputQuantity\r\n                                    value={newQuantity}\r\n                                    onChange={setNewQuantity}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <SelectUnit\r\n                                    value={newUnit}\r\n                                    onChange={setNewUnit}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <OptionsEdit\r\n                                    onAccept={() => saveNewIngredient()}\r\n                                    onCancel={() => {\r\n                                        setAddMode(false)\r\n                                        clearInputs()\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ingredients","import {MdCancel, MdCheckCircle, MdEdit} from \"react-icons/all\";\r\nimport {useState} from \"react\";\r\n\r\nconst RecipeDescription = ({description, editMode, onEnableEditMode, onDisableEditMode, onUpdate}) => {\r\n\r\n    const [newPreparation, setNewPreparation] = useState('')\r\n\r\n    if(!editMode) {\r\n        return (\r\n        <div className='prepDescription'>\r\n            <div id='prepDescriptionHeader'>\r\n                <div className='icon'>\r\n                    <MdEdit\r\n                        size={30}\r\n                        onClick={() => {\r\n                            onEnableEditMode()\r\n                            setNewPreparation(description)\r\n                        }}\r\n                    />\r\n                </div>\r\n                <h3>PREPARATION:</h3>\r\n                <div style={{width: 30}}></div>\r\n            </div>\r\n            &emsp;{description}\r\n        </div>\r\n        )\r\n    }\r\n\r\n    const saveDescription = async () => {\r\n        await onUpdate(newPreparation)\r\n        setNewPreparation('')\r\n    }\r\n\r\n    return (\r\n        <div className='prepDescriptionInput'>\r\n            <div id='prepDescriptionHeader'>\r\n                <div id='descOptions'>\r\n                    <div className='icon'>\r\n                        <MdCheckCircle\r\n                            size={30}\r\n                            onClick={() => saveDescription()}\r\n                        />\r\n                    </div>\r\n                    <div className='icon'>\r\n                        <MdCancel\r\n                            size={30}\r\n                            onClick={() => {\r\n                                onDisableEditMode()\r\n                                setNewPreparation('')\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <h3>PREPARATION:</h3>\r\n                <div style={{width: 80}}></div>\r\n\r\n            </div>\r\n            <textarea\r\n                maxLength='4000'\r\n                className='prepDescriptionTextarea'\r\n                placeholder='preparation description'\r\n                value={newPreparation}\r\n                onChange={(e) => setNewPreparation(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeDescription","\r\nconst SelectTime = ({value, onChange}) => {\r\n    return (\r\n        <select value={value} onChange={(e) => onChange(e.target.value)}>\r\n            <option value=\"?\">?</option>\r\n            <option value=\"5 min\">5 min</option>\r\n            <option value=\"10 min\">10 min</option>\r\n            <option value=\"15 min\">15 min</option>\r\n            <option value=\"30 min\">30 min</option>\r\n            <option value=\"45 min\">45 min</option>\r\n            <option value=\"1 h\">1 h</option>\r\n            <option value=\"1,5 h\">1,5 h</option>\r\n            <option value=\"2 h\">2 h</option>\r\n            <option value=\"3 h\">3 h</option>\r\n            <option value=\"> 4 h\">> 4 h</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SelectTime","\r\nconst SelectPortions = ({value, onChange}) => {\r\n    return (\r\n        <select value={value} onChange={(e) => onChange(e.target.value)}>\r\n            <option value=\"0\">?</option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"5\">5</option>\r\n            <option value=\"6\">6</option>\r\n            <option value=\"7\">7</option>\r\n            <option value=\"8\">8</option>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"11\">> 10</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SelectPortions","import {MdCancel, MdCheckCircle, MdDeleteForever, MdEdit} from \"react-icons/all\";\r\nimport image from \"../../assets/default-img.svg\";\r\nimport {useState} from \"react\";\r\nimport SelectTime from \"./SelectTime\";\r\nimport SelectPortions from \"./SelectPortions\";\r\n\r\nconst RecipeInfo = ({recipe, editMode, onEnableEditMode, onDisableEditMode, onUpdate, onDelete}) => {\r\n\r\n    const [newName, setNewName] = useState('')\r\n    const [newImageUrl, setNewImageUrl] = useState('')\r\n    const [newPortions, setNewPortions] = useState('')\r\n    const [newTime, setNewTime] = useState('')\r\n\r\n    const saveRecipeInfo = async () => {\r\n        if (newName === '') {\r\n            alert('Name input can\\'t be empty')\r\n            return\r\n        }\r\n        if (newName === recipe.name && newImageUrl === recipe.imageUrl && newPortions === recipe.portions && newTime === recipe.time) {\r\n            alert('Notching changed')\r\n            return\r\n        }\r\n        const data = {\r\n            name: newName,\r\n            imageUrl: newImageUrl,\r\n            portions: newPortions === '' ? '0' : newPortions,\r\n            time: newTime === '' ? '?' : newTime\r\n        }\r\n        await onUpdate(data)\r\n        clearInfoInputs()\r\n    }\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function preparePortionsValue(value) {\r\n        if (value === 0) {\r\n            return '?'\r\n        }\r\n        if (value > 10 ) {\r\n            return '> 10'\r\n        }\r\n        return value\r\n    }\r\n\r\n    function prepareTimeValue(value) {\r\n        if (value === '') {\r\n            return '?'\r\n        }\r\n        if (value > 10 ) {\r\n            return '> 4 h'\r\n        }\r\n        return value\r\n    }\r\n\r\n    function clearInfoInputs() {\r\n        setNewName('')\r\n        setNewImageUrl('')\r\n        setNewPortions('')\r\n        setNewTime('')\r\n    }\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className='recipePictureContainer'>\r\n                <img\r\n                    src={validateImageUrl(recipe.imageUrl)}\r\n                    alt=''\r\n                />\r\n                <div className='recipePictureContainerTopBar'>\r\n                    <div className={'recipePictureContainerTopBarEditBox'}>\r\n                        <div className='icon' style={{color: 'white'}}>\r\n                            <MdEdit\r\n                                size={30}\r\n                                onClick={() => {\r\n                                    onEnableEditMode()\r\n                                    setNewName(recipe.name)\r\n                                    setNewImageUrl(recipe.imageUrl)\r\n                                    setNewPortions(recipe.portions)\r\n                                    setNewTime(recipe.time)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <h2>{recipe.name}</h2>\r\n                    <div className='recipePictureContainerTopBarDeleteBox'>\r\n                        <div className='icon' style={{color: 'white'}}>\r\n                            <MdDeleteForever\r\n                                size={30}\r\n                                onClick={() => onDelete()}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {recipe.isDefault ? (\r\n                    <div id='defaultWatermark'>\r\n                        DEFAULT RECIPE\r\n                    </div>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n\r\n                <span>\r\n                    <h5>PORTIONS :&ensp;{preparePortionsValue(recipe.portions)}</h5>\r\n                    <h5>PREP.&ensp;TIME :&ensp;{prepareTimeValue(recipe.time)}</h5>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='recipePictureContainer'>\r\n            <img\r\n                src={validateImageUrl(newImageUrl)}\r\n                alt=''\r\n            />\r\n            <div className='recipePictureContainerTopBar'>\r\n                <div className={'recipePictureContainerTopBarEditBox'}>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdCheckCircle\r\n                            size={30}\r\n                            onClick={() => saveRecipeInfo()}\r\n                        />\r\n                    </div>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdCancel\r\n                            size={30}\r\n                            onClick={() => {\r\n                                onDisableEditMode()\r\n                                clearInfoInputs()\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <input\r\n                    maxLength='32'\r\n                    type='text'\r\n                    placeholder='name'\r\n                    value={newName}\r\n                    onChange={(e) => setNewName(e.target.value)}\r\n                />\r\n                <div className='recipePictureContainerTopBarDeleteBox'>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdDeleteForever\r\n                            size={30}\r\n                            onClick={() => onDelete(recipe.id)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <input\r\n                maxLength='255'\r\n                id='recipeImgUrlInput'\r\n                type='text'\r\n                placeholder='imageUrl'\r\n                value={newImageUrl}\r\n                onChange={(e) => setNewImageUrl(e.target.value)}\r\n            />\r\n            <span>\r\n                <div className='recipePictureContainerEditBox'>\r\n                    <h5>PORTIONS :&ensp;</h5>\r\n                    <SelectPortions\r\n                        value={newPortions}\r\n                        onChange={setNewPortions}\r\n                    />\r\n                </div>\r\n                <div className='recipePictureContainerEditBox'>\r\n                    <h5>PREP.&ensp;TIME :&ensp;</h5>\r\n                    <SelectTime\r\n                        value={newTime}\r\n                        onChange={setNewTime}\r\n                    />\r\n                </div>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeInfo","import {useEffect, useState} from \"react\";\r\nimport Ingredients from \"../ingredient/Ingredients\";\r\nimport RecipeDescription from \"./RecipeDescription\";\r\nimport RecipeInfo from \"./RecipeInfo\";\r\nimport {useLocation, useNavigate} from \"react-router-dom\";\r\nimport {PacmanLoader} from \"react-spinners\";\r\n\r\nconst Recipe = ({onDelete, onUpdate}) => {\r\n    const [recipe, setRecipe] = useState(null)\r\n    const [editInfoMode, setEditInfoMode] = useState(false)\r\n    const [editDescriptionMode, setEditDescriptionMode] = useState(false)\r\n    const navigate = useNavigate()\r\n    const recipeId = useLocation().pathname.split(\"/\").pop()\r\n\r\n    useEffect(() => {\r\n        const getRecipe = async () => {\r\n            const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}`)\r\n            const fetchedRecipe = await res.json()\r\n            console.log('fetched recipe =>', fetchedRecipe)\r\n            setRecipe(fetchedRecipe)\r\n        }\r\n        getRecipe().then()\r\n    }, [recipeId]);\r\n\r\n    const deleteRecipe = async () => {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t delete default recipes')\r\n            return;\r\n        }\r\n        if (!window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}`, {\r\n            method: 'DELETE',\r\n        })\r\n        if (res.status !== 200) {\r\n            alert('Error Deleting This Recipe')\r\n            return\r\n        }\r\n        await onDelete(recipeId)\r\n        navigate('/', {replace: true})\r\n        console.log('deleted recipe id =>', recipeId)\r\n    }\r\n\r\n    const sendRequest = async (newRecipe) => {\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newRecipe),\r\n        })\r\n        const data = await res.json()\r\n        setRecipe(data)\r\n        console.log('edited recipe =>', data)\r\n        await onUpdate(data)\r\n    }\r\n\r\n    const updateRecipeInfo = async (data) => {\r\n        const newRecipe = {\r\n            id: recipe.id,\r\n            name: data.name,\r\n            imageUrl: data.imageUrl,\r\n            portions: data.portions === '' ? '0' : data.portions,\r\n            time: data.time === '' ? '?' : data.time,\r\n            preparation: recipe.preparation\r\n        }\r\n        await sendRequest(newRecipe)\r\n        setEditInfoMode(false)\r\n    }\r\n\r\n    const updateRecipeDescription = async (description) => {\r\n        const newRecipe = {\r\n            id: recipeId,\r\n            name: recipe.name,\r\n            imageUrl: recipe.imageUrl,\r\n            portions: recipe.portions,\r\n            time: recipe.time,\r\n            preparation: description\r\n        }\r\n        await sendRequest(newRecipe)\r\n        setEditDescriptionMode(false)\r\n    }\r\n\r\n    function enableEditInfoMode() {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t edit default recipes')\r\n            return;\r\n        }\r\n        setEditInfoMode(true)\r\n    }\r\n\r\n    function enableEditDescriptionMode() {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t edit default recipes')\r\n            return;\r\n        }\r\n        setEditDescriptionMode(true)\r\n    }\r\n\r\n    if (recipe === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='recipe'>\r\n            <RecipeInfo\r\n                recipe={recipe}\r\n                editMode={editInfoMode}\r\n                onEnableEditMode={() => enableEditInfoMode()}\r\n                onDisableEditMode={() => setEditInfoMode(false)}\r\n                onUpdate={(data) => updateRecipeInfo(data)}\r\n                onDelete={() => deleteRecipe()}\r\n            />\r\n            <Ingredients\r\n                extractedRecipeId={recipeId}\r\n                recipeIsDefault={recipe.isDefault}\r\n            />\r\n            <RecipeDescription\r\n                description={recipe.preparation}\r\n                editMode={editDescriptionMode}\r\n                onEnableEditMode={() => enableEditDescriptionMode()}\r\n                onDisableEditMode={() => setEditDescriptionMode(false)}\r\n                onUpdate={(text) => updateRecipeDescription(text)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {MdCheckCircle, MdCancel} from \"react-icons/md\";\r\nimport image from \"../assets/default-img.svg\";\r\nimport InputName from \"./ingredient/InputName\";\r\nimport InputQuantity from \"./ingredient/InputQuantity\";\r\nimport OptionsEdit from \"./ingredient/OptionsEdit\";\r\nimport SelectUnit from \"./ingredient/SelectUnit\";\r\nimport OptionsBasic from \"./ingredient/OptionsBasic\";\r\nimport SelectTime from \"./recipe/SelectTime\";\r\nimport SelectPortions from \"./recipe/SelectPortions\";\r\n\r\nconst Form = ({onSubmit}) => {\r\n    const [newRecipeName, setNewRecipeName] = useState('')\r\n    const [newImageUrl, setNewImageUrl] = useState('')\r\n    const [newPortions, setNewPortions] = useState('')\r\n    const [newTime, setNewTime] = useState('')\r\n    const [newPreparation, setNewPreparation] = useState('')\r\n    const [newIngredientName, setNewIngredientName] = useState('')\r\n    const [newQuantity, setNewQuantity] = useState('')\r\n    const [newUnit, setNewUnit] = useState('')\r\n    const [ingredientList, setIngredientList] = useState([])\r\n    const navigate = useNavigate();\r\n\r\n    const submitForm = async () => {\r\n        if (newRecipeName === '') {\r\n            alert('Please fill at least name input')\r\n            return\r\n        }\r\n        const newRecipe = {\r\n            name: newRecipeName,\r\n            imageUrl: newImageUrl,\r\n            portions: newPortions === '' ? '0' : newPortions,\r\n            time: newTime === '' ? '?' : newTime,\r\n            preparation: newPreparation,\r\n            isDefault: false\r\n        }\r\n        await onSubmit(newRecipe, ingredientList)\r\n        navigate('/', {replace: true});\r\n    }\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function clearIngredientInputs() {\r\n        setNewIngredientName('')\r\n        setNewQuantity('')\r\n        setNewUnit('')\r\n    }\r\n\r\n    function addIngredientToList() {\r\n        if (newIngredientName === '' || newQuantity === '' || newUnit === '' || newUnit === 'unit') {\r\n            alert('Please fill inputs of new ingredient')\r\n            return\r\n        }\r\n        if (parseFloat(newQuantity) > 1000) {\r\n            alert('Quantity max value is 1000')\r\n            return ''\r\n        }\r\n        const ingredient = {\r\n            name: newIngredientName,\r\n            quantity: newQuantity,\r\n            unit: newUnit\r\n        }\r\n\r\n        setIngredientList([...ingredientList, ingredient])\r\n\r\n        console.log(ingredientList)\r\n        clearIngredientInputs()\r\n    }\r\n\r\n    function removeIngredientFromList(ingredient) {\r\n        const newIngredientList = ingredientList.filter((i) => i !== ingredient)\r\n        setIngredientList(newIngredientList)\r\n    }\r\n\r\n    return (\r\n        <div className='formContainer'>\r\n\r\n            <h2>RECIPE ADD FORM</h2>\r\n            <br/>\r\n            <h3>INFO:</h3>\r\n\r\n            <div className='formInput'>\r\n                <label>Name:</label>\r\n                <input\r\n                    maxLength='32'\r\n                    type='text'\r\n                    placeholder='name'\r\n                    value={newRecipeName}\r\n                    onChange={(e) => setNewRecipeName(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className='formInput'>\r\n                <label>Image URL:</label>\r\n                <input\r\n                    maxLength='255'\r\n                    type='text'\r\n                    placeholder='imageUrl'\r\n                    value={newImageUrl}\r\n                    onChange={(e) => setNewImageUrl(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <img id='imagePreview'\r\n                src={validateImageUrl(newImageUrl)}\r\n                alt=''\r\n            />\r\n\r\n            <div className='formInput'>\r\n                <label>Portions:</label>\r\n                <SelectPortions\r\n                    value={newPortions}\r\n                    onChange={setNewPortions}\r\n                />\r\n            </div>\r\n\r\n            <div className='formInput'>\r\n                <label>Preparation time:</label>\r\n                <SelectTime\r\n                    value={newTime}\r\n                    onChange={setNewTime}\r\n                />\r\n            </div>\r\n            <br/>\r\n            <div id='formDescription'>\r\n                <h3>PREPARATION:</h3>\r\n                <textarea\r\n                    maxLength='4000'\r\n                    className='prepDescriptionTextarea'\r\n                    placeholder='preparation description'\r\n                    value={newPreparation}\r\n                    onChange={(e) => setNewPreparation(e.target.value)}\r\n                />\r\n            </div>\r\n            <br/>\r\n            <div className='ingredientsTableContainer'>\r\n                <h3>INGREDIENTS:</h3>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>NAME</th>\r\n                        <th>QUANTITY</th>\r\n                        <th>UNIT</th>\r\n                        <th>OPTIONS</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {ingredientList.map((ingredient) =>\r\n                        <tr key={ingredient.id}>\r\n                            <td>{ingredient.name}</td>\r\n                            <td>{ingredient.quantity}</td>\r\n                            <td>{ingredient.unit}</td>\r\n                            <td>\r\n                                <OptionsBasic\r\n                                    onEdit={false}\r\n                                    onDelete={() => removeIngredientFromList(ingredient)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td>\r\n                            <InputName\r\n                                value={newIngredientName}\r\n                                onChange={setNewIngredientName}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <InputQuantity\r\n                                value={newQuantity}\r\n                                onChange={setNewQuantity}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <SelectUnit\r\n                                value={newUnit}\r\n                                onChange={setNewUnit}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <OptionsEdit\r\n                                onAccept={() => addIngredientToList()}\r\n                                onCancel={() => clearIngredientInputs()}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <div id='formOptions'>\r\n                <div className='icon'>\r\n                    <MdCheckCircle\r\n                        size={40}\r\n                        onClick={() => submitForm()}\r\n                    />\r\n                </div>\r\n                <Link to='/'>\r\n                    <div className='icon'>\r\n                        <MdCancel\r\n                            size={40}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport {useEffect, useState} from \"react\";\nimport Recipes from \"./components/Recipes\";\nimport {HashRouter as Router, Route, Routes} from 'react-router-dom'\nimport About from \"./components/About\";\nimport Recipe from \"./components/recipe/Recipe\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n    const [recipes, setRecipes] = useState(null)\n\n    useEffect(() => {\n        const getRecipes = async () => {\n            const res = await fetch('https://bcookbook.herokuapp.com/recipes')\n            const fetchedRecipes = await res.json()\n            console.log('fetched recipes =>', fetchedRecipes)\n            setRecipes(fetchedRecipes)\n        }\n        getRecipes().then()\n    }, []);\n\n    const saveNewRecipe = async (recipe, ingredientList) => {\n        const recipeResponse = await fetch(`https://bcookbook.herokuapp.com/recipes`, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(recipe),\n        })\n        const recipeData = await recipeResponse.json()\n        setRecipes([...recipes, recipeData])\n        const recipeId = recipeData.id\n        const ingredientsResponse = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/list`, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(ingredientList),\n        })\n        const ingredientsData = await ingredientsResponse.json()\n        console.log('saved recipe =>', recipeData)\n        console.log('saved ingredients =>', ingredientsData)\n    }\n\n    const filterRecipes = async (id) => {\n        setRecipes(recipes.filter((recipe) => recipe.id.toString() !== id))\n    }\n\n    const replaceRecipe = async (newRecipe) => {\n        const index = recipes.indexOf(recipes.find((recipe) => recipe.id === newRecipe.id))\n        const newRecipes = recipes\n        newRecipes[index] = newRecipe\n        setRecipes(newRecipes)\n        console.log('recipes updated')\n    }\n\n    return (\n        <Router hashType='slash'>\n            <div className=\"app\">\n                <Header />\n                <Routes>\n                    <Route path='/' element={\n                        <Recipes\n                            recipes={recipes}\n                        />}\n                    />\n                    <Route path='/recipe/:id' element={\n                        <Recipe\n                            onDelete={(id) => filterRecipes(id)}\n                            onUpdate={(recipe) => replaceRecipe(recipe)}\n                        />}\n                    />\n                    <Route path='/form' element={\n                        <Form\n                            onSubmit={(recipe, ingredientList) => saveNewRecipe(recipe, ingredientList)}\n                        />}\n                    />\n                    <Route path='/about' element={<About/>}/>\n                </Routes>\n                <Footer />\n            </div>\n        </Router>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}