{"version":3,"sources":["components/Header.js","components/Footer.js","assets/default-img.svg","components/Recipes.js","components/About.js","components/Ingredients.js","components/RecipeDescription.js","components/RecipeInfo.js","components/Recipe.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","style","width","display","justifyContent","to","size","Footer","Recipes","recipes","map","recipe","id","src","imageUrl","undefined","image","toString","includes","alt","name","value","portions","time","isDefault","top","About","href","Ingredients","extractedRecipeId","recipeIsDefault","useState","ingredients","setIngredients","addMode","setAddMode","editMode","setEditMode","newName","setNewName","newQuantity","setNewQuantity","newUnit","setNewUnit","recipeId","useEffect","getIngredients","a","fetch","res","json","fetchedIngredients","console","log","then","saveNewIngredient","newIngredient","validateNewIngredient","method","headers","body","JSON","stringify","clearInputs","data","updateIngredient","indexOfOldIngredient","indexOf","find","ingredient","newIngredients","deleteIngredient","alert","window","confirm","status","filter","parseFloat","quantity","unit","validateKey","e","key","preventDefault","toLowerCase","onClick","enableEditMode","maxLength","type","placeholder","onChange","target","onKeyDown","replace","RecipeDescription","description","onEnableEditMode","onDisableEditMode","onUpdate","newPreparation","setNewPreparation","saveDescription","RecipeInfo","onDelete","newImageUrl","setNewImageUrl","newPortions","setNewPortions","newTime","setNewTime","validateImageUrl","clearInfoInputs","color","prepareTimeValue","saveRecipeInfo","Recipe","setRecipe","editInfoMode","setEditInfoMode","editDescriptionMode","setEditDescriptionMode","navigate","useNavigate","useLocation","pathname","split","pop","getRecipe","fetchedRecipe","deleteRecipe","sendRequest","newRecipe","updateRecipeInfo","preparation","updateRecipeDescription","text","Form","onSubmit","newRecipeName","setNewRecipeName","newIngredientName","setNewIngredientName","ingredientList","setIngredientList","submitForm","clearIngredientInputs","newIngredientList","i","removeIngredientFromList","addIngredientToList","App","setRecipes","getRecipes","fetchedRecipes","saveNewRecipe","recipeResponse","recipeData","ingredientsResponse","ingredientsData","filterRecipes","replaceRecipe","index","newRecipes","hashType","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3098277.chunk.js","sourcesContent":["import {MdHome, MdInfo} from \"react-icons/md\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header className='header'>\r\n            <div style={{width: 80, display: 'flex', justifyContent: 'space-between'}}>\r\n                <Link to='/'>\r\n                    <div className='icon'>\r\n                        <MdHome\r\n                            size={35}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n                <Link to='/about'>\r\n                    <div className='icon'>\r\n                        <MdInfo\r\n                            size={35}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n\r\n            <h1>COOKBOOK</h1>\r\n\r\n            <div style={{width: 80}}></div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            2021 @ AJ\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","export default __webpack_public_path__ + \"static/media/default-img.b0520a1e.svg\";","import image from \"../assets/default-img.svg\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {MdAddCircle} from \"react-icons/md\";\r\nimport {PacmanLoader} from \"react-spinners\"\r\n\r\nconst Recipes = ({recipes}) => {\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function preparePortionsValue(value) {\r\n        if (value === 0) {\r\n            return '?'\r\n        }\r\n        if (value>10) {\r\n            return '> 10'\r\n        }\r\n        return value\r\n    }\r\n\r\n    if (recipes === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n                <h3>FETCHING DATA...</h3>\r\n                <h4>please wait while backend is waking up...</h4>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='recipesContainer'>\r\n            {recipes.map((recipe) => (\r\n                    <Link to={`/recipe/${recipe.id}`} key={recipe.id}>\r\n                        <div className='recipesThumbnail' >\r\n                            <img\r\n                                src={validateImageUrl(recipe.imageUrl)}\r\n                                alt=''\r\n                            />\r\n                            <div className='recipesThumbnailBar'>\r\n                                <h3>{recipe.name}</h3>\r\n                                <div className='recipesThumbnailBarBottom'>\r\n                                    <h6>PORTIONS :&nbsp;&nbsp;{preparePortionsValue(recipe.portions)}</h6>\r\n                                    <h6>PREP.&nbsp;&nbsp;TIME :&nbsp;&nbsp;{recipe.time === '' ? '?' : recipe.time}</h6>\r\n                                </div>\r\n                            </div>\r\n                            {recipe.isDefault ? (\r\n                                <div id='defaultWatermark' style={{top: -2}}>\r\n                                    DEFAULT RECIPE\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </div>\r\n                    </Link>\r\n                )\r\n            )}\r\n            <Link to={`/form`}>\r\n                <div className='recipesThumbnailAdd' >\r\n                    <MdAddCircle\r\n                        id='addIcon'\r\n                        size={50}\r\n                    />\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipes\r\n","\r\nconst About = () => {\r\n\r\n    return (\r\n        <div id='about'>\r\n            <h3>Welcome to my CookBook App</h3>\r\n            <div>\r\n                text<br/>\r\n                text<br/>\r\n                more text<br/>\r\n                <br/>\r\n                <a href=\"https://www.freepik.com/vectors/food\">Logo & default image vector created by freepik - www.freepik.com</a>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default About\r\n","import {IoMdAddCircle, MdCancel, MdCheckCircle, MdDeleteForever, MdEdit} from \"react-icons/all\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {PacmanLoader} from \"react-spinners\";\r\n\r\nconst Ingredients = ({extractedRecipeId, recipeIsDefault}) => {\r\n    const [ingredients, setIngredients] = useState(null)\r\n    const [addMode, setAddMode] = useState(false)\r\n    const [editMode, setEditMode] = useState(0)\r\n    const [newName, setNewName] = useState('')\r\n    const [newQuantity, setNewQuantity] = useState('')\r\n    const [newUnit, setNewUnit] = useState('')\r\n    const recipeId = extractedRecipeId\r\n\r\n    useEffect(() => {\r\n        const getIngredients = async () => {\r\n            const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients`)\r\n            const fetchedIngredients = await res.json()\r\n            console.log('fetched ingredients', fetchedIngredients)\r\n            setIngredients(fetchedIngredients)\r\n        }\r\n        getIngredients().then()\r\n    }, [recipeId]);\r\n\r\n    const saveNewIngredient = async () => {\r\n        const newIngredient = validateNewIngredient()\r\n        if (newIngredient.name === '') {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newIngredient),\r\n        })\r\n        console.log('saved ingredient', newIngredient)\r\n        clearInputs()\r\n        setAddMode(false)\r\n        const data = await res.json()\r\n        setIngredients([...ingredients, data])\r\n    }\r\n\r\n    const updateIngredient = async (id) => {\r\n        const newIngredient = validateNewIngredient()\r\n        if (newIngredient.name === '') {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newIngredient),\r\n        })\r\n        const data = await res.json()\r\n        const indexOfOldIngredient = ingredients.indexOf(ingredients.find((ingredient) => ingredient.id === id))\r\n        const newIngredients = ingredients\r\n        newIngredients[indexOfOldIngredient] = data\r\n        setIngredients(newIngredients)\r\n        console.log('edited ingredient =>', data)\r\n        clearInputs()\r\n        setEditMode(0)\r\n    }\r\n\r\n    const deleteIngredient = async (id) => {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t delete ingredients of default recipe')\r\n            return;\r\n        }\r\n        if (!window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/${id}`, {\r\n            method: 'DELETE',\r\n        })\r\n        res.status === 200\r\n            ? setIngredients(ingredients.filter((ingredient) => ingredient.id !== id))\r\n            : alert('Error Deleting This Ingredient')\r\n        console.log('deleted ingredient id =>', id)\r\n    }\r\n\r\n    function validateNewIngredient() {\r\n        if (newName === '' || newQuantity === '' || newUnit === '' || newUnit === 'unit') {\r\n            alert('Please fill all inputs')\r\n            return {name: ''}\r\n        }\r\n        if (parseFloat(newQuantity) > 1000) {\r\n            alert('Quantity max value is 1000')\r\n            return {name: ''}\r\n        }\r\n        return {\r\n            name: newName,\r\n            quantity: newQuantity,\r\n            unit: newUnit\r\n        }\r\n    }\r\n\r\n    function clearInputs() {\r\n        setNewName('')\r\n        setNewQuantity('')\r\n        setNewUnit('')\r\n    }\r\n\r\n    function enableEditMode(ingredient) {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t edit ingredients of default recipe')\r\n            return;\r\n        }\r\n        setAddMode(false)\r\n        setNewName(ingredient.name)\r\n        setNewQuantity(ingredient.quantity)\r\n        setNewUnit(ingredient.unit)\r\n        setEditMode(ingredient.id)\r\n    }\r\n\r\n    function enableAddMode() {\r\n        if (recipeIsDefault) {\r\n            alert('You can\\'t add ingredients to default recipe')\r\n            return;\r\n        }\r\n        setEditMode(0)\r\n        clearInputs()\r\n        setAddMode(true)\r\n    }\r\n\r\n    function validateKey(e) {\r\n        const restrictedKeys = ['e', '+', '-']\r\n        console.log(e.key)\r\n\r\n        if (restrictedKeys.includes(e.key)) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    if (ingredients === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='ingredientsTableContainer'>\r\n            <h3>INGREDIENTS:</h3>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>NAME</th>\r\n                    <th>QUANTITY</th>\r\n                    <th>UNIT</th>\r\n                    <th>OPTIONS</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {ingredients.map((ingredient) =>\r\n                    editMode !== ingredient.id ? (\r\n                        // ********* ROW IN NORMAL MODE ********\r\n                        <tr key={ingredient.id}>\r\n                            <td>\r\n                                {ingredient.name}\r\n                            </td>\r\n                            <td>\r\n                                {ingredient.quantity}\r\n                            </td>\r\n                            <td>\r\n                                {ingredient.unit.toLowerCase()}\r\n                            </td>\r\n                            <td className='ingredientsSetupColumn'>\r\n                                <div className='icon'>\r\n                                    <MdEdit\r\n                                        size={25}\r\n                                        onClick={() => enableEditMode(ingredient)}\r\n                                    />\r\n                                </div>\r\n                                <div className='icon'>\r\n                                    <MdDeleteForever\r\n                                        size={25}\r\n                                        onClick={() => deleteIngredient(ingredient.id)\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    ) : (\r\n                        // ********* ROW IN EDIT MODE ********\r\n                        <tr key={ingredient.id}>\r\n                            <td>\r\n                                <input\r\n                                    maxLength='32'\r\n                                    type='text'\r\n                                    placeholder='name'\r\n                                    value={newName}\r\n                                    onChange={(e) => setNewName(e.target.value)}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type='number'\r\n                                    placeholder='quantity'\r\n                                    value={newQuantity}\r\n                                    onKeyDown={ (e) => validateKey(e)}\r\n                                    onChange={(e) => setNewQuantity(e.target.value.replace(',','.'))}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <select name=\"newUnit\"\r\n                                        value={newUnit} onChange={(e) => setNewUnit(e.target.value)}>\r\n                                    <option value=\"\">unit</option>\r\n                                    <option value=\"G\">g</option>\r\n                                    <option value=\"DAG\">dag</option>\r\n                                    <option value=\"KG\">kg</option>\r\n                                    <option value=\"ML\">ml</option>\r\n                                    <option value=\"L\">l</option>\r\n                                    <option value=\"TEASPOON\">teaspoon</option>\r\n                                    <option value=\"TABLESPOON\">tablespoon</option>\r\n                                    <option value=\"PINCH\">pinch</option>\r\n                                    <option value=\"HANDFUL\">handful</option>\r\n                                    <option value=\"PIECE\">piece</option>\r\n                                    <option value=\"CUP\">cup</option>\r\n                                </select>\r\n                            </td>\r\n                            <td className='ingredientsSetupColumn'>\r\n                                <div className='icon'>\r\n                                    <MdCheckCircle\r\n                                        size={25}\r\n                                        onClick={() => updateIngredient(ingredient.id)}\r\n                                    />\r\n                                </div>\r\n                                <div className='icon'>\r\n                                    <MdCancel\r\n                                        size={25}\r\n                                        onClick={() => {\r\n                                            setEditMode(0)\r\n                                            clearInputs()\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </td>\r\n\r\n                        </tr>\r\n                    )\r\n                )}\r\n                {!addMode ? (\r\n                    // ********* ADD ROW DISABLED ********\r\n                    <tr>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td className='ingredientsSetupColumn'>\r\n                            <div className='icon'>\r\n                                <IoMdAddCircle\r\n                                    size={25}\r\n                                    onClick={() => enableAddMode()}\r\n                                />\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                ) : (\r\n                    // ********* ADD ROW ENABLED ********\r\n                    <tr>\r\n                        <td>\r\n                            <input\r\n                                maxLength='32'\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={newName}\r\n                                onChange={(e) => setNewName(e.target.value)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type='number'\r\n                                placeholder='quantity'\r\n                                value={newQuantity}\r\n                                onKeyDown={ (e) => validateKey(e)}\r\n                                onChange={(e) => setNewQuantity(e.target.value.replace(',','.'))}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select value={newUnit} onChange={(e) => setNewUnit(e.target.value)}>\r\n                                <option value=\"\">unit</option>\r\n                                <option value=\"G\">g</option>\r\n                                <option value=\"DAG\">dag</option>\r\n                                <option value=\"KG\">kg</option>\r\n                                <option value=\"ML\">ml</option>\r\n                                <option value=\"L\">l</option>\r\n                                <option value=\"TEASPOON\">teaspoon</option>\r\n                                <option value=\"TABLESPOON\">tablespoon</option>\r\n                                <option value=\"PINCH\">pinch</option>\r\n                                <option value=\"HANDFUL\">handful</option>\r\n                                <option value=\"PIECE\">piece</option>\r\n                                <option value=\"CUP\">cup</option>\r\n                            </select>\r\n                        </td>\r\n                        <td className='ingredientsSetupColumn'>\r\n                            <div className='icon'>\r\n                                <MdCheckCircle\r\n                                    size={25}\r\n                                    onClick={() => saveNewIngredient()}\r\n                                />\r\n                            </div>\r\n                            <div className='icon'>\r\n                                <MdCancel\r\n                                    size={25}\r\n                                    onClick={() => {\r\n                                        clearInputs()\r\n                                        setAddMode(false)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ingredients","import {MdCancel, MdCheckCircle, MdEdit} from \"react-icons/all\";\r\nimport {useState} from \"react\";\r\n\r\nconst RecipeDescription = ({description, editMode, onEnableEditMode, onDisableEditMode, onUpdate}) => {\r\n\r\n    const [newPreparation, setNewPreparation] = useState('')\r\n\r\n    if(!editMode) {\r\n        return (\r\n        <div className='prepDescription'>\r\n            <div id='prepDescriptionHeader'>\r\n                <div className='icon'>\r\n                    <MdEdit\r\n                        size={30}\r\n                        onClick={() => {\r\n                            onEnableEditMode()\r\n                            setNewPreparation(description)\r\n                        }}\r\n                    />\r\n                </div>\r\n                <h3>PREPARATION:</h3>\r\n                <div style={{width: 30}}></div>\r\n            </div>\r\n            &emsp;{description}\r\n        </div>\r\n        )\r\n    }\r\n\r\n    const saveDescription = async () => {\r\n        await onUpdate(newPreparation)\r\n        setNewPreparation('')\r\n    }\r\n\r\n    return (\r\n        <div className='prepDescriptionInput'>\r\n            <div id='prepDescriptionHeader'>\r\n                <div id='descOptions'>\r\n                    <div className='icon'>\r\n                        <MdCheckCircle\r\n                            size={30}\r\n                            onClick={() => saveDescription()}\r\n                        />\r\n                    </div>\r\n                    <div className='icon'>\r\n                        <MdCancel\r\n                            size={30}\r\n                            onClick={() => {\r\n                                onDisableEditMode()\r\n                                setNewPreparation('')\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <h3>PREPARATION:</h3>\r\n                <div style={{width: 80}}></div>\r\n\r\n            </div>\r\n            <textarea\r\n                maxLength='4000'\r\n                className='prepDescriptionTextarea'\r\n                placeholder='preparation description'\r\n                value={newPreparation}\r\n                onChange={(e) => setNewPreparation(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeDescription","import {MdCancel, MdCheckCircle, MdDeleteForever, MdEdit} from \"react-icons/all\";\r\nimport image from \"../assets/default-img.svg\";\r\nimport {useState} from \"react\";\r\n\r\nconst RecipeInfo = ({recipe, editMode, onEnableEditMode, onDisableEditMode, onUpdate, onDelete}) => {\r\n\r\n    const [newName, setNewName] = useState('')\r\n    const [newImageUrl, setNewImageUrl] = useState('')\r\n    const [newPortions, setNewPortions] = useState('')\r\n    const [newTime, setNewTime] = useState('')\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function preparePortionsValue(value) {\r\n        if (value === 0) {\r\n            return '?'\r\n        }\r\n        if (value > 10 ) {\r\n            return '> 10'\r\n        }\r\n        return value\r\n    }\r\n\r\n    function prepareTimeValue(value) {\r\n        if (value === '') {\r\n            return '?'\r\n        }\r\n        if (value > 10 ) {\r\n            return '> 4 h'\r\n        }\r\n        return value\r\n    }\r\n\r\n    function clearInfoInputs() {\r\n        setNewName('')\r\n        setNewImageUrl('')\r\n        setNewPortions('')\r\n        setNewTime('')\r\n    }\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className='recipePictureContainer'>\r\n                <img\r\n                    src={validateImageUrl(recipe.imageUrl)}\r\n                    alt=''\r\n                />\r\n                <div className='recipePictureContainerTopBar'>\r\n                    <div className={'recipePictureContainerTopBarEditBox'}>\r\n                        <div className='icon' style={{color: 'white'}}>\r\n                            <MdEdit\r\n                                size={30}\r\n                                onClick={() => {\r\n                                    onEnableEditMode()\r\n                                    setNewName(recipe.name)\r\n                                    setNewImageUrl(recipe.imageUrl)\r\n                                    setNewPortions(recipe.portions)\r\n                                    setNewTime(recipe.time)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <h2>{recipe.name}</h2>\r\n                    <div className='recipePictureContainerTopBarDeleteBox'>\r\n                        <div className='icon' style={{color: 'white'}}>\r\n                            <MdDeleteForever\r\n                                size={30}\r\n                                onClick={() => onDelete()}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {recipe.isDefault ? (\r\n                    <div id='defaultWatermark'>\r\n                        DEFAULT RECIPE\r\n                    </div>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n\r\n                <span>\r\n                    <h5>PORTIONS :&ensp;{preparePortionsValue(recipe.portions)}</h5>\r\n                    <h5>PREP.&ensp;TIME :&ensp;{prepareTimeValue(recipe.time)}</h5>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const saveRecipeInfo = async () => {\r\n        if (newName === '') {\r\n            alert('Name input can\\'t be empty')\r\n            return\r\n        }\r\n        if (newName === recipe.name && newImageUrl === recipe.imageUrl && newPortions === recipe.portions && newTime === recipe.time) {\r\n            alert('Notching changed')\r\n            return\r\n        }\r\n        const data = {\r\n            name: newName,\r\n            imageUrl: newImageUrl,\r\n            portions: newPortions === '' ? '0' : newPortions,\r\n            time: newTime === '' ? '?' : newTime\r\n        }\r\n        await onUpdate(data)\r\n        clearInfoInputs()\r\n    }\r\n\r\n    return (\r\n        <div className='recipePictureContainer'>\r\n            <img\r\n                src={validateImageUrl(newImageUrl)}\r\n                alt=''\r\n            />\r\n            <div className='recipePictureContainerTopBar'>\r\n                <div className={'recipePictureContainerTopBarEditBox'}>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdCheckCircle\r\n                            size={30}\r\n                            onClick={() => saveRecipeInfo()}\r\n                        />\r\n                    </div>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdCancel\r\n                            size={30}\r\n                            onClick={() => {\r\n                                onDisableEditMode()\r\n                                clearInfoInputs()\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <input\r\n                    maxLength='32'\r\n                    type='text'\r\n                    placeholder='name'\r\n                    value={newName}\r\n                    onChange={(e) => setNewName(e.target.value)}\r\n                />\r\n                <div className='recipePictureContainerTopBarDeleteBox'>\r\n                    <div className='icon' style={{color: 'white'}}>\r\n                        <MdDeleteForever\r\n                            size={30}\r\n                            onClick={() => onDelete(recipe.id)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <input\r\n                maxLength='255'\r\n                id='recipeImgUrlInput'\r\n                type='text'\r\n                placeholder='imageUrl'\r\n                value={newImageUrl}\r\n                onChange={(e) => setNewImageUrl(e.target.value)}\r\n            />\r\n            <span>\r\n                <div className='recipePictureContainerEditBox'>\r\n                    <h5>PORTIONS :&ensp;</h5>\r\n                    <select value={newPortions} onChange={(e) => setNewPortions(e.target.value)}>\r\n                        <option value=\"0\">?</option>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"6\">6</option>\r\n                        <option value=\"7\">7</option>\r\n                        <option value=\"8\">8</option>\r\n                        <option value=\"9\">9</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"11\">> 10</option>\r\n                    </select>\r\n                </div>\r\n                <div className='recipePictureContainerEditBox'>\r\n                    <h5>PREP.&ensp;TIME :&ensp;</h5>\r\n                    <select value={newTime} onChange={(e) => setNewTime(e.target.value)}>\r\n                        <option value=\"?\">?</option>\r\n                        <option value=\"5 min\">5 min</option>\r\n                        <option value=\"10 min\">10 min</option>\r\n                        <option value=\"15 min\">15 min</option>\r\n                        <option value=\"30 min\">30 min</option>\r\n                        <option value=\"45 min\">45 min</option>\r\n                        <option value=\"1 h\">1 h</option>\r\n                        <option value=\"1,5 h\">1,5 h</option>\r\n                        <option value=\"2 h\">2 h</option>\r\n                        <option value=\"3 h\">3 h</option>\r\n                        <option value=\"> 4 h\">> 4 h</option>\r\n                    </select>\r\n                </div>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeInfo","import {useEffect, useState} from \"react\";\r\nimport Ingredients from \"./Ingredients\";\r\nimport RecipeDescription from \"./RecipeDescription\";\r\nimport RecipeInfo from \"./RecipeInfo\";\r\nimport {useLocation, useNavigate} from \"react-router-dom\";\r\nimport {PacmanLoader} from \"react-spinners\";\r\n\r\nconst Recipe = ({onDelete, onUpdate}) => {\r\n    const [recipe, setRecipe] = useState(null)\r\n    const [editInfoMode, setEditInfoMode] = useState(false)\r\n    const [editDescriptionMode, setEditDescriptionMode] = useState(false)\r\n    const navigate = useNavigate()\r\n    const recipeId = useLocation().pathname.split(\"/\").pop()\r\n\r\n    useEffect(() => {\r\n        const getRecipe = async () => {\r\n            const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}`)\r\n            const fetchedRecipe = await res.json()\r\n            console.log('fetched recipe =>', fetchedRecipe)\r\n            setRecipe(fetchedRecipe)\r\n        }\r\n        getRecipe().then()\r\n    }, [recipeId]);\r\n\r\n    const deleteRecipe = async () => {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t delete default recipes')\r\n            return;\r\n        }\r\n        if (!window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n            return\r\n        }\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}`, {\r\n            method: 'DELETE',\r\n        })\r\n        if (res.status !== 200) {\r\n            alert('Error Deleting This Recipe')\r\n            return\r\n        }\r\n        await onDelete(recipeId)\r\n        navigate('/', {replace: true})\r\n        console.log('deleted recipe id =>', recipeId)\r\n    }\r\n\r\n    const sendRequest = async (newRecipe) => {\r\n        const res = await fetch(`https://bcookbook.herokuapp.com/recipes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newRecipe),\r\n        })\r\n        const data = await res.json()\r\n        setRecipe(data)\r\n        console.log('edited recipe =>', data)\r\n        await onUpdate(data)\r\n    }\r\n\r\n    const updateRecipeInfo = async (data) => {\r\n        const newRecipe = {\r\n            id: recipe.id,\r\n            name: data.name,\r\n            imageUrl: data.imageUrl,\r\n            portions: data.portions === '' ? '0' : data.portions,\r\n            time: data.time === '' ? '?' : data.time,\r\n            preparation: recipe.preparation\r\n        }\r\n        await sendRequest(newRecipe)\r\n        setEditInfoMode(false)\r\n    }\r\n\r\n    const updateRecipeDescription = async (description) => {\r\n        const newRecipe = {\r\n            id: recipeId,\r\n            name: recipe.name,\r\n            imageUrl: recipe.imageUrl,\r\n            portions: recipe.portions,\r\n            time: recipe.time,\r\n            preparation: description\r\n        }\r\n        await sendRequest(newRecipe)\r\n        setEditDescriptionMode(false)\r\n    }\r\n\r\n    function enableEditInfoMode() {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t edit default recipes')\r\n            return;\r\n        }\r\n        setEditInfoMode(true)\r\n    }\r\n\r\n    function enableEditDescriptionMode() {\r\n        if (recipe.isDefault) {\r\n            alert('You can\\'t edit default recipes')\r\n            return;\r\n        }\r\n        setEditDescriptionMode(true)\r\n    }\r\n\r\n    if (recipe === null) {\r\n        return (\r\n            <div className='loaderContainer'>\r\n                <div className='spinner'>\r\n                    <PacmanLoader size={25}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='recipe'>\r\n            <RecipeInfo\r\n                recipe={recipe}\r\n                editMode={editInfoMode}\r\n                onEnableEditMode={() => enableEditInfoMode()}\r\n                onDisableEditMode={() => setEditInfoMode(false)}\r\n                onUpdate={(data) => updateRecipeInfo(data)}\r\n                onDelete={() => deleteRecipe()}\r\n            />\r\n            <Ingredients\r\n                extractedRecipeId={recipeId}\r\n                recipeIsDefault={recipe.isDefault}\r\n            />\r\n            <RecipeDescription\r\n                description={recipe.preparation}\r\n                editMode={editDescriptionMode}\r\n                onEnableEditMode={() => enableEditDescriptionMode()}\r\n                onDisableEditMode={() => setEditDescriptionMode(false)}\r\n                onUpdate={(text) => updateRecipeDescription(text)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {MdCheckCircle, MdCancel} from \"react-icons/md\";\r\nimport image from \"../assets/default-img.svg\";\r\nimport {MdDeleteForever} from \"react-icons/all\";\r\n\r\nconst Form = ({onSubmit}) => {\r\n    const [newRecipeName, setNewRecipeName] = useState('')\r\n    const [newImageUrl, setNewImageUrl] = useState('')\r\n    const [newPortions, setNewPortions] = useState('')\r\n    const [newTime, setNewTime] = useState('')\r\n    const [newPreparation, setNewPreparation] = useState('')\r\n    const [newIngredientName, setNewIngredientName] = useState('')\r\n    const [newQuantity, setNewQuantity] = useState('')\r\n    const [newUnit, setNewUnit] = useState('')\r\n    const [ingredientList, setIngredientList] = useState([])\r\n    const navigate = useNavigate();\r\n\r\n    const submitForm = async () => {\r\n        if (newRecipeName === '') {\r\n            alert('Please fill at least name input')\r\n            return\r\n        }\r\n        const newRecipe = {\r\n            name: newRecipeName,\r\n            imageUrl: newImageUrl,\r\n            portions: newPortions === '' ? '0' : newPortions,\r\n            time: newTime === '' ? '?' : newTime,\r\n            preparation: newPreparation,\r\n            isDefault: false\r\n        }\r\n        await onSubmit(newRecipe, ingredientList)\r\n        navigate('/', {replace: true});\r\n    }\r\n\r\n    function validateImageUrl(imageUrl) {\r\n        if (imageUrl === undefined) {\r\n            return image.toString()\r\n        }\r\n        if (imageUrl === '' || !(imageUrl.includes('http'))) {\r\n            return image.toString()\r\n        }\r\n        return imageUrl\r\n    }\r\n\r\n    function clearIngredientInputs() {\r\n        setNewIngredientName('')\r\n        setNewQuantity('')\r\n        setNewUnit('')\r\n    }\r\n\r\n    function addIngredientToList() {\r\n        if (newIngredientName === '' || newQuantity === '' || newUnit === '' || newUnit === 'unit') {\r\n            alert('Please fill inputs of new ingredient')\r\n            return\r\n        }\r\n        if (parseFloat(newQuantity) > 1000) {\r\n            alert('Quantity max value is 1000')\r\n            return ''\r\n        }\r\n        const ingredient = {\r\n            name: newIngredientName,\r\n            quantity: newQuantity,\r\n            unit: newUnit\r\n        }\r\n\r\n        setIngredientList([...ingredientList, ingredient])\r\n\r\n        console.log(ingredientList)\r\n        clearIngredientInputs()\r\n    }\r\n\r\n    function removeIngredientFromList(ingredient) {\r\n        const newIngredientList = ingredientList.filter((i) => i !== ingredient)\r\n        setIngredientList(newIngredientList)\r\n    }\r\n\r\n    function validateKey(e) {\r\n        const restrictedKeys = ['e', '+', '-']\r\n        console.log(e.key)\r\n\r\n        if (restrictedKeys.includes(e.key)) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='formContainer'>\r\n\r\n            <h2>RECIPE ADD FORM</h2>\r\n            <br/>\r\n            <h3>INFO:</h3>\r\n\r\n            <div className='formInput'>\r\n                <label>Name:</label>\r\n                <input\r\n                    maxLength='32'\r\n                    type='text'\r\n                    placeholder='name'\r\n                    value={newRecipeName}\r\n                    onChange={(e) => setNewRecipeName(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className='formInput'>\r\n                <label>Image URL:</label>\r\n                <input\r\n                    maxLength='255'\r\n                    type='text'\r\n                    placeholder='imageUrl'\r\n                    value={newImageUrl}\r\n                    onChange={(e) => setNewImageUrl(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <img id='imagePreview'\r\n                src={validateImageUrl(newImageUrl)}\r\n                alt=''\r\n            />\r\n\r\n            <div className='formInput'>\r\n                <label>Portions:</label>\r\n                <select value={newPortions} onChange={(e) => setNewPortions(e.target.value)}>\r\n                    <option value=\"0\">?</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"6\">6</option>\r\n                    <option value=\"7\">7</option>\r\n                    <option value=\"8\">8</option>\r\n                    <option value=\"9\">9</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"11\">> 10</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className='formInput'>\r\n                <label>Preparation time:</label>\r\n                <select value={newTime} onChange={(e) => setNewTime(e.target.value)}>\r\n                    <option value=\"?\">?</option>\r\n                    <option value=\"5 min\">5 min</option>\r\n                    <option value=\"10 min\">10 min</option>\r\n                    <option value=\"15 min\">15 min</option>\r\n                    <option value=\"30 min\">30 min</option>\r\n                    <option value=\"45 min\">45 min</option>\r\n                    <option value=\"1 h\">1 h</option>\r\n                    <option value=\"1,5 h\">1,5 h</option>\r\n                    <option value=\"2 h\">2 h</option>\r\n                    <option value=\"3 h\">3 h</option>\r\n                    <option value=\"> 4 h\">> 4 h</option>\r\n                </select>\r\n            </div>\r\n            <br/>\r\n            <div id='formDescription'>\r\n                <h3>PREPARATION:</h3>\r\n                <textarea\r\n                    maxLength='4000'\r\n                    className='prepDescriptionTextarea'\r\n                    placeholder='preparation description'\r\n                    value={newPreparation}\r\n                    onChange={(e) => setNewPreparation(e.target.value)}\r\n                />\r\n            </div>\r\n            <br/>\r\n            <div className='ingredientsTableContainer'>\r\n                <h3>INGREDIENTS:</h3>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>NAME</th>\r\n                        <th>QUANTITY</th>\r\n                        <th>UNIT</th>\r\n                        <th>OPTIONS</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {ingredientList.map((ingredient) =>\r\n                        <tr key={ingredient.id}>\r\n                            <td>{ingredient.name}</td>\r\n                            <td>{ingredient.quantity}</td>\r\n                            <td>{ingredient.unit}</td>\r\n                            <td>\r\n                                <div className='icon'>\r\n                                    <MdDeleteForever\r\n                                        size={25}\r\n                                        onClick={() => removeIngredientFromList(ingredient)}\r\n                                    />\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td>\r\n                            <input\r\n                                maxLength='32'\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={newIngredientName}\r\n                                onChange={(e) => setNewIngredientName(e.target.value)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <input\r\n                                type='number'\r\n                                placeholder='quantity'\r\n                                value={newQuantity}\r\n                                onKeyDown={ (e) => validateKey(e)}\r\n                                onChange={(e) => setNewQuantity(e.target.value.replace(',','.'))}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select value={newUnit} onChange={(e) => setNewUnit(e.target.value)}>\r\n                                <option value=\"\">unit</option>\r\n                                <option value=\"G\">g</option>\r\n                                <option value=\"DAG\">dag</option>\r\n                                <option value=\"KG\">kg</option>\r\n                                <option value=\"ML\">ml</option>\r\n                                <option value=\"L\">l</option>\r\n                                <option value=\"TEASPOON\">teaspoon</option>\r\n                                <option value=\"TABLESPOON\">tablespoon</option>\r\n                                <option value=\"PINCH\">pinch</option>\r\n                                <option value=\"HANDFUL\">handful</option>\r\n                                <option value=\"PIECE\">piece</option>\r\n                                <option value=\"CUP\">cup</option>\r\n                            </select>\r\n                        </td>\r\n                        <td className='ingredientsSetupColumn'>\r\n                            <div className='icon'>\r\n                                <MdCheckCircle\r\n                                    size={25}\r\n                                    onClick={() => {addIngredientToList()}}\r\n                                />\r\n                            </div>\r\n                            <div className='icon'>\r\n                                <MdCancel\r\n                                    size={25}\r\n                                    onClick={() => clearIngredientInputs()}\r\n                                />\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <div id='formOptions'>\r\n                <div className='icon'>\r\n                    <MdCheckCircle\r\n                        size={40}\r\n                        onClick={() => submitForm()}\r\n                    />\r\n                </div>\r\n                <Link to='/'>\r\n                    <div className='icon'>\r\n                        <MdCancel\r\n                            size={40}\r\n                        />\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport {useEffect, useState} from \"react\";\nimport Recipes from \"./components/Recipes\";\nimport {HashRouter as Router, Route, Routes} from 'react-router-dom'\nimport About from \"./components/About\";\nimport Recipe from \"./components/Recipe\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n    const [recipes, setRecipes] = useState(null)\n\n    useEffect(() => {\n        const getRecipes = async () => {\n            const res = await fetch('https://bcookbook.herokuapp.com/recipes')\n            const fetchedRecipes = await res.json()\n            console.log('fetched recipes =>', fetchedRecipes)\n            setRecipes(fetchedRecipes)\n        }\n        getRecipes().then()\n    }, []);\n\n    const saveNewRecipe = async (recipe, ingredientList) => {\n        const recipeResponse = await fetch(`https://bcookbook.herokuapp.com/recipes`, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(recipe),\n        })\n        const recipeData = await recipeResponse.json()\n        setRecipes([...recipes, recipeData])\n        const recipeId = recipeData.id\n        const ingredientsResponse = await fetch(`https://bcookbook.herokuapp.com/recipes/${recipeId}/ingredients/list`, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(ingredientList),\n        })\n        const ingredientsData = await ingredientsResponse.json()\n        console.log('saved recipe =>', recipeData)\n        console.log('saved ingredients =>', ingredientsData)\n    }\n\n    const filterRecipes = async (id) => {\n        setRecipes(recipes.filter((recipe) => recipe.id.toString() !== id))\n    }\n\n    const replaceRecipe = async (newRecipe) => {\n        const index = recipes.indexOf(recipes.find((recipe) => recipe.id === newRecipe.id))\n        const newRecipes = recipes\n        newRecipes[index] = newRecipe\n        setRecipes(newRecipes)\n        console.log('recipes updated')\n    }\n\n    return (\n        <Router hashType='slash'>\n            <div className=\"app\">\n                <Header />\n                <Routes>\n                    <Route path='/' element={\n                        <Recipes\n                            recipes={recipes}\n                        />}\n                    />\n                    <Route path='/recipe/:id' element={\n                        <Recipe\n                            onDelete={(id) => filterRecipes(id)}\n                            onUpdate={(recipe) => replaceRecipe(recipe)}\n                        />}\n                    />\n                    <Route path='/form' element={\n                        <Form\n                            onSubmit={(recipe, ingredientList) => saveNewRecipe(recipe, ingredientList)}\n                        />}\n                    />\n                    <Route path='/about' element={<About/>}/>\n                </Routes>\n                <Footer />\n            </div>\n        </Router>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}